;
; 41128 Test Program
;

; Pin Assignments
; SP0  = A0
; SP1  = A1
; SP2  = A2
; SP3  = A3
; SP4  = A4
; SP5  = A5
; SP6  = A6
; SP7  = A7
; SP8  = D
; SP9  = WE#
; SP10 = RAS1#
; SP11 = RAS2#
; SP12 = CAS#
; SP13 = nc
; SP14 = nc
; SP15 = nc
; SP16 = Q

; Timing values (nameplate, tRAC): 100ns, 120ns, 150ns, 200ns, 300ns

; set pins: CAS, RAS2, RAS1, WR.
; Combos: 1111 (all high) 1101 (ras low) 0100 (ras, cas, wr low) 0101 (ras, cas low).
; Alt                     1011 (ras low) 0010 (ras, cas, wr low) 0011 (ras, cas low).
.pio_version 0 // only requires PIO version 0
.program ram41128
begin:
    set pins, 0b1111   ; 158.4 raise RAS#. tRAS=151.8ns  ES39.  = 3.3*37=122.1ns
    pull block        ; 161.7 Wait for new data to arrive ES40
    out y, 1 [1]         ; 165.0 get first bit which tells us which row line to use ES41
    out x, 1 [2]         ; 168.3 get second bit which tells us if we are in write mode. ES42
    out pins, 8          ; Load row address
    jmp !y ras1_transfer ; 171.6 ES43
ras2_transfer:
    set pins, 0b1011 [3] ; Lower RAS#
    out pins, 9
    jmp !x skip_wr3
    set pins, 0b0010 ; Lower CAS#, WR#
    jmp skip_wr4
skip_wr3:
    set pins, 0b0011 ; Lower CAS#
    nop
skip_wr4:
    mov OSR, NULL [4] ; Clear OSR
    set pins, 0b0011 ; Raise WR#
    out pins, 9 [5]  ; Clear addr+data
    in pins, 1
    set pins, 0b1011 [6] ; Raise CAS#
    jmp begin
ras1_transfer:        ; (delay val at end of instr)
    set pins, 0b1101 [3]   ; 6.6    Lower RAS#
    out pins, 9
    jmp !x skip_wr
    set pins, 0b0100  ; Lower CAS#, WR#
    jmp skip_wr2
skip_wr:
    set pins, 0b0101  ; Lower CAS#
    nop
skip_wr2:
    mov OSR, NULL [4] ; Clear OSR
    set pins, 0b0101 ; Raise WR#
    out pins, 9 [5]  ; Clear addr+data
    in pins, 1
    set pins, 0b1101 [6] ; Raise CAS#
    jmp begin


% c-sdk {
// Original delay numbers are 27, 5, 3, 13, 9
#define RAM41128_DELAYS 4
#define RAM41128_DELAY_FIELDS 7
#define GPIO_LED 25
static const uint8_t ram41128_delays[5][32] = {{0,  0, 27,  4,  8,  6,  8},    // 120ns
                                               {0,  0, 27,  5, 11,  7, 12},    // 150ns
                                               {0, 11, 23,  7, 14, 12, 17},    // 200ns
                                               {0, 20, 23, 10, 21, 25,  9} };    // 250ns

static inline void ram41128_program_init(PIO pio, uint sm, uint offset, uint pin) {
    uint count;

    // Set up 17 total pins
    for (count = 0; count < 17; count++) {
        pio_gpio_init(pio, pin + count);
        gpio_set_slew_rate(pin + count, GPIO_SLEW_RATE_FAST);
        gpio_set_drive_strength(pin + count, GPIO_DRIVE_STRENGTH_4MA);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 13, true); // true=output
    pio_sm_set_consecutive_pindirs(pio, sm, pin + 16, 1, false); // input

    pio_sm_set_clkdiv(pio, sm, 1); // should just be the default.

    pio_sm_config c = ram41128_program_get_default_config(offset);
// A0, A1, A2, A3, A4, A5, A6, A7, nc, D, WR, RAS, CAS, nc, nc, nc, IN
    sm_config_set_out_pins(&c, pin, 9);
    sm_config_set_set_pins(&c, pin + 9, 4); // Max is 5.
    sm_config_set_in_pins(&c, pin + 16);

    // Shift right, Autopull off, 19 bits (1 + 1 + 8 + 9) at a time
    sm_config_set_out_shift(&c, true, false, 19);
    // Shift left, Autopush on, 1 bit
    sm_config_set_in_shift(&c, false, true, 1);

 //   hw_set_bits(&pio->input_sync_bypass, 1u << pin); to bypass synchronization on an input
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

// Routines for reading and writing memory through the FIFOs
int ram41128_ram_read(int addr)
{
    uint d;
    // daaaaaaaa_aaaaaaaawf
    // ccccccccrrrrrrrrb
    // Note: Initially tried addr MSB as the bank select
    // but this may be too slow to self refresh correctly.
    pio_sm_put(pio, sm, (addr) & 1 |                 // Use 2nd RAS line? addr >> 16
                        0 << 1 |                     // Write flag
                        ((addr >> 1) & 0xff) << 2 |  // Row address addr >> 0
                        ((addr >> 9) & 0xff) << 10 | // Column address addr >> 9
                        ((0 & 1) << 18));            // Data bit
    while (pio_sm_is_rx_fifo_empty(pio, sm)) {}      // Wait for data to arrive
    d = pio_sm_get(pio, sm);                         // Return the data
    gpio_put(GPIO_LED, d);
    return d;
}

void ram41128_ram_write(int addr, int data)
{
    pio_sm_put(pio, sm, (addr) & 1 |                 // Use 2nd RAS line?
                        1 << 1 |                     // Write flag
                        ((addr >> 1) & 0xff) << 2 |  // Row address
                        ((addr >> 9) & 0xff) << 10 | // Column address
                        ((data & 1) << 18));         // Data bit
    while (pio_sm_is_rx_fifo_empty(pio, sm)) {}      // Wait for dummy data
    pio_sm_get(pio, sm);                             // Discard the dummy data bit
}

// Routines to set up and tear down the PIO program (and the RAM test)
void ram41128_setup_pio(uint speed_grade, uint variant)
{
    uint pin = 5;
    set_current_pio_program(&ram41128_program);
    // Patches the program with the correct delay values
    pio_patch_delays(ram41128_delays[speed_grade], RAM41128_DELAY_FIELDS);
    bool rc = pio_claim_free_sm_and_add_program_for_gpio_range(get_current_pio_program(), &pio, &sm, &offset, pin, 17, true);
    ram41128_program_init(pio, sm, offset, pin);
    pio_sm_set_enabled(pio, sm, true);
}

void ram41128_teardown_pio()
{
    pio_sm_set_enabled(pio, sm, false);
    pio_remove_program_and_unclaim_sm(&ram41128_program, pio, sm, offset);
}

// This RAM chip configuration
static const mem_chip_t ram41128_chip = { .setup_pio = ram41128_setup_pio,
                                          .teardown_pio = ram41128_teardown_pio,
                                          .ram_read = ram41128_ram_read,
                                          .ram_write = ram41128_ram_write,
                                          .mem_size = 131072, // 131072
                                          .bits = 1,
                                          .variants = NULL,
                                          .speed_grades = RAM41128_DELAYS,
                                          .chip_name = "41128 (128Kx1)",
                                          .speed_names = {"120ns", "150ns", "200ns", "250ns"} };



%}
