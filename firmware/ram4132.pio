;
; 4132 (stacked) Test Program
;

; Pin Assignments
; SP0  = A0
; SP1  = A1
; SP2  = A2
; SP3  = A3
; SP4  = A4
; SP5  = A5
; SP6  = A6
; SP7  = nc
; SP8  = nc
; SP9  = D
; SP10 = WE#
; SP11 = RAS1#
; SP12 = CAS1#
; SP13 = RAS2#
; SP14 = CAS2#
; SP15 = nc
; SP16 = Q

; Timing values (nameplate, tRAC): 100ns, 120ns, 150ns, 200ns, 300ns

; set pins: WE, CAS2, RAS2, CAS1, RAS1.
.pio_version 0 // only requires PIO version 0
.program ram4132
begin:
    set pins, 0b11111   ; 158.4 raise RAS#. tRAS=151.8ns  ES39.  = 3.3*37=122.1ns
skip_ras:
    pull block        ; 161.7 Wait for new data to arrive ES40
    out y, 1 [1]         ; 165.0 get first bit which tells us which row line to use ES41
    out x, 1 [2]         ; 168.3 get second bit which tells us if we are in write mode. ES42
    out pins, 9          ; Load row address
    jmp !y ras1_transfer ; 171.6 ES43
ras2_transfer:
    set pins, 0b10111 [3] ; Lower RAS2#
    out pins, 10
    jmp !x skip_wr3
    set pins, 0b00110 ; Lower CAS2#, WR#
    jmp skip_wr4
skip_wr3:
    set pins, 0b00111 ; Lower CAS2#, not WR#
    nop
skip_wr4:
    mov OSR, NULL [4] ; Clear OSR
    set pins, 0b00111 ; Raise WR#
    out pins, 10 [5]  ; Clear addr+data
    in pins, 1
    set pins, 0b10111 [6] ; Raise CAS2#
    jmp begin
ras1_transfer:        ; (delay val at end of instr)
    set pins, 0b11101 [3]   ; 6.6    Lower RAS1#
    out pins, 10
    jmp !x skip_wr
    set pins, 0b11000  ; Lower CAS1#, WR#
    jmp skip_wr2
skip_wr:
    set pins, 0b11001  ; Lower CAS1#, not WR#
    nop
skip_wr2:
    mov OSR, NULL [4] ; Clear OSR
    set pins, 0b11001 ; Raise WR#
    out pins, 10 [5]  ; Clear addr+data
    in pins, 1
    set pins, 0b11101 [6] ; Raise CAS1#
    jmp begin


% c-sdk {

#define RAM4132_DELAYS 4
#define RAM4132_DELAY_FIELDS 7
static const uint8_t ram4132_delays[4][32] = {{0, 31, 31, 4, 11, 11,  9},    // 150ns
                                              {0, 23, 24, 5, 14, 18, 13},    // 200ns
                                              {0, 21, 22, 8, 20, 21, 16},    // 250ns
                                              {0, 21, 22, 8, 23, 25, 24} };  // 300ns

static inline void ram4132_program_init(PIO pio, uint sm, uint offset, uint pin) {
    uint count;

    // Set up 17 total pins
    for (count = 0; count < 17; count++) {
        pio_gpio_init(pio, pin + count);
        gpio_set_slew_rate(pin + count, GPIO_SLEW_RATE_FAST);
        gpio_set_drive_strength(pin + count, GPIO_DRIVE_STRENGTH_4MA);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 16, true); // true=output
    pio_sm_set_consecutive_pindirs(pio, sm, pin + 16, 1, false); // input

    pio_sm_set_clkdiv(pio, sm, 1); // should just be the default.

    pio_sm_config c = ram4132_program_get_default_config(offset);
// A0, A1, A2, A3, A4, A5, A6, A7, nc, D, nc, RAS1, RAS2, CAS1, CAS2, WE, IN
    sm_config_set_out_pins(&c, pin, 10);
    sm_config_set_set_pins(&c, pin + 10, 5); // Max is 5.
    sm_config_set_in_pins(&c, pin + 16);

    // Shift right, Autopull off, 21 bits (1 + 1 + 9 + 10) at a time
    sm_config_set_out_shift(&c, true, false, 21);
    // Shift left, Autopush on, 1 bit
    sm_config_set_in_shift(&c, false, true, 1);

 //   hw_set_bits(&pio->input_sync_bypass, 1u << pin); to bypass synchronization on an input
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

// Routines for reading and writing memory through the FIFOs
int ram4132_ram_read(int addr)
{
    uint d;
    // daaaaaaaaa_aaaaaaaaawf
    // cccccccrrrrrrrb
    // Note: Initially tried addr MSB as the bank select
    // but this may be too slow to self refresh correctly.
    pio_sm_put(pio, sm, (addr) & 1 |                 // Use 2nd RAS line?
                        0 << 1 |                     // Write flag
                        ((addr >> 1) & 0x7f) << 2 |  // Row address
                        ((addr >> 8) & 0x7f) << 11 | // Column address
                        ((0 & 1) << 20));            // Data bit
    while (pio_sm_is_rx_fifo_empty(pio, sm)) {}      // Wait for data to arrive
    d = pio_sm_get(pio, sm);                         // Return the data
    //gpio_put(GPIO_LED, d);
    return d;
}

void ram4132_ram_write(int addr, int data)
{
    pio_sm_put(pio, sm, (addr) & 1 |                 // Use 2nd RAS line?
                        1 << 1 |                     // Write flag
                        ((addr >> 1) & 0x7f) << 2 |  // Row address
                        ((addr >> 8) & 0x7f) << 11 | // Column address
                        ((data & 1) << 20));         // Data bit
    while (pio_sm_is_rx_fifo_empty(pio, sm)) {}      // Wait for dummy data
    pio_sm_get(pio, sm);                             // Discard the dummy data bit
}

// Routines to set up and tear down the PIO program (and the RAM test)
void ram4132_setup_pio(uint speed_grade, uint variant)
{
    uint pin = 5;
    set_current_pio_program(&ram4132_program);
    // Patches the program with the correct delay values
    pio_patch_delays(ram4132_delays[speed_grade], RAM4132_DELAY_FIELDS);
    bool rc = pio_claim_free_sm_and_add_program_for_gpio_range(get_current_pio_program(), &pio, &sm, &offset, pin, 17, true);
    ram4132_program_init(pio, sm, offset, pin);
    pio_sm_set_enabled(pio, sm, true);
}

void ram4132_teardown_pio()
{
    pio_sm_set_enabled(pio, sm, false);
    pio_remove_program_and_unclaim_sm(&ram4132_program, pio, sm, offset);
}

// This RAM chip configuration
static const mem_chip_t ram4132_stk_chip = { .setup_pio = ram4132_setup_pio,
                                          .teardown_pio = ram4132_teardown_pio,
                                          .ram_read = ram4132_ram_read,
                                          .ram_write = ram4132_ram_write,
                                          .mem_size = 32768,
                                          .bits = 1,
                                          .speed_grades = RAM4132_DELAYS,
                                          .chip_name = "4132 (32Kx1, stacked)",
                                          .speed_names = {"150ns", "200ns", "250ns", "300ns"} };



%}
