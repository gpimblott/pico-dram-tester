;
; 44256/64 Test Program
;

; fixme: how to keep OE high normally (except for read)
; fixme: timings

; Note: 'set PINDIRS' also sets all high order bits to 0, so I can't use it!

; Pin Assignments
; SP0  = DQ0
; SP1  = DQ1
; SP2  = DQ2
; SP3  = DQ3
; SP4  = OE
; SP5  = A0
; SP6  = A1
; SP7  = A2
; SP8  = A3
; SP9  = A4
; SP10 = A5
; SP11 = A6
; SP12 = A7
; SP13 = A8 (nc on 4464/16)
; SP14 = RAS#
; SP15 = CAS#
; SP16 = WE#

; set pins: WR, CAS, RAS
.pio_version 1 // PIO version 1 since we need to mov pindirs
.program ram44256
; Note: We need to update the address lines and the RAS# at the same time.
    jmp begin
full_transfer:        ; (delay val at end of instr)
    nop [1]           ; [0] ES44
    nop [2]           ; 264.0 [26] tRC = 260.7ns
    out pins, 14      ; 3.3    Load row address (and dummy values for data outputs)
    set pins, 0b110   ; 6.6    Lower RAS#
    nop [3]           ; 26.4   [5] tRCD (RAS to CAS) = 26.4ns
cas_only_transfer:
    out pins, 14      ; 29.7     Load col address + write data + write enable (setup for write data?)
    jmp !x skip_wr    ; 33
    mov pindirs, ~NULL ; All outputs
    set pins, 0b000   ; 36.3     Lower CAS#, WR#
    jmp skip_wr2      ; 39.6
skip_wr:
    set x, 0b01111 ; data pins are inputs
    mov pindirs, ~x; preserve upper bits as 1 (output)
    set pins, 0b100   ; 36.3     Lower CAS#
    nop               ; 39.6
skip_wr2:
    mov OSR, NULL     ; 42.9     Clear OSR  ES 8cyc+[3]=2=10
    nop [4]           ; 56.1     [3] ES 10+[4]=14
    set pins, 0b100   ; 59.4     Raise WR#  tWCH = 26.4ns. ES1+14=15
; Output enable is low but this shouldn't matter
    out pins, 14      ; 62.7     Clear addr+data. tCAH, tDH = 29.7ns. ES1+15=16
    nop [5]           ; 108.9    [13] total = tRSH, tRSH ES 16+[5]=23
    set pins, 0b110   ; 115.5    Raise CAS#. tCAS = 79.2ns ES 25
    in pins, 4
; outputs are still active for up to 30ns after rising edge of cas
; only turn on our output pindirs after that.
    push noblock [6]      ; 118.8    ES 26  [9] ES27+[6]=37
    jmp !y begin      ; 155.1 Raise RAS# only if we are doing a full transfer ES38
    jmp skip_ras      ; 158.4
begin:
    set pins, 0b111   ; 158.4 raise RAS#. tRAS=151.8ns  ES39.  = 3.3*37=122.1ns
skip_ras:
    pull block        ; 161.7 Wait for new data to arrive ES40
    out y, 1          ; 165.0 get first bit which tells us if this is fast page mode ES41
    out x, 1          ; 168.3 get second bit which tells us if we are in write mode. ES42
    jmp !y full_transfer ; 171.6 ES43
    out NULL, 14 [7]           ; 174.9 Throw out row address
    jmp cas_only_transfer ; 178.2 Fast page mode tCP=22*3.3=72.6ns


% c-sdk {
#define GPIO_LED 25
#define RAM_4BIT_DELAY_FIELDS 8
#define RAM44256_DELAYS 5
// increase [5] from 2 to 5.
static const uint8_t ram44256_delays[5][32] = {{0, 0,  6, 2,  1,  7,  1,  0},    // 60ns
                                               {0, 0, 11, 2,  1,  7,  2,  0},    // 70ns
                                               {0, 0, 17, 3,  1,  7,  4,  0},    // 80ns
                                               {0, 0, 21, 3,  3,  7,  3,  0},    // 100ns
                                               {0, 0, 23, 3,  4,  7,  6,  0} };  // 120ns

#define RAM4464_DELAYS 6
static const uint8_t ram4464_delays[6][32] =  {{0, 0,  6, 2,  1,  2,  1,  0},    // 60ns
                                               {0, 0, 11, 2,  1,  2,  2,  0},    // 70ns
                                               {0, 0, 17, 3,  1,  2,  4,  0},    // 80ns
                                               {0, 0, 14, 3,  6,  5,  9,  0},    // 100ns
                                               {0, 0, 23, 3,  6,  5,  6,  0},    // 120ns
                                               {0, 0, 26, 3, 10,  6,  10, 0} };  // 150ns

#define RAM4416_DELAYS 3
static const uint8_t ram4416_delays[3][32] =  {{0, 0, 26, 3, 10,  7,  0,  0},    // 120ns
                                               {0, 0, 26, 3, 15,  3,  8,  0},    // 150ns
                                               {0,12, 20, 3, 21,  8,  12, 3} };  // 200ns

static inline void ram44256_program_init(PIO pio, uint sm, uint offset, uint pin) {
    uint count;

    // Set up 17 total pins
    for (count = 0; count < 17; count++) {
        pio_gpio_init(pio, pin + count);
        gpio_set_slew_rate(pin + count, GPIO_SLEW_RATE_FAST);
        gpio_set_drive_strength(pin + count, GPIO_DRIVE_STRENGTH_4MA);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, pin + 4, 17, true); // true=output
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 4, false); // false=input

    pio_sm_set_clkdiv(pio, sm, 1); // should just be the default.

    pio_sm_config c = ram44256_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin, 14);
    sm_config_set_set_pins(&c, pin + 14, 3); // Max is 5.
    sm_config_set_in_pins(&c, pin);

    // Shift right, Autopull off, 30 bits (1 + 1 + 14 + 14) at a time
    sm_config_set_out_shift(&c, true, false, 30);
    // Shift left, Autopull on, 4 bits
    sm_config_set_in_shift(&c, false, false, 4);

    hw_set_bits(&pio->input_sync_bypass, 0xf << pin); //to bypass synchronization on an input
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

// Routines for reading and writing memory through the FIFOs
int ram44256_ram_read(int addr)
{
    uint d;
    // fpm flag, write flag, 14 bits of data, oe, rasaddr, 14 bits of data, oe, casaddr
    // aaaaaaaaaodddd_aaaaaaaaaoddddwf

    pio_sm_put(pio, sm, 0 |                      // Fast page mode flag
                        (0 << 1) |               // Write flag
                        (1 << 6) |               // Initial OE is high
                        ((addr & 0x1ff) << 7) |  // Row address
                        (0 << 20) |              // Final OE is low (for read)
                        ((addr >> 9) << 21));    // Column address

    while (pio_sm_is_rx_fifo_empty(pio, sm)) {}  // Wait for data to arrive
    d = pio_sm_get(pio, sm);                 // Return the data
//    gpio_put(GPIO_LED, d);
    return d;
}

int ram4464_ram_read(int addr)
{
    uint d;
    pio_sm_put(pio, sm, 0 |                      // Fast page mode flag
                        (0 << 1) |               // Write flag
                        (1 << 6) |               // Initial OE is high
                        ((addr & 0x0ff) << 7) |  // Row address
                        (0 << 20) |              // Final OE is low (for read)
                        ((addr >> 8) << 21));    // Column address

    while (pio_sm_is_rx_fifo_empty(pio, sm)) {}  // Wait for data to arrive
    d = pio_sm_get(pio, sm);                 // Return the data
    return d;
}

int ram4416_ram_read(int addr)
{
    uint d;
    // CCCCCCRRRRRRRR
    pio_sm_put(pio, sm, 0 |                      // Fast page mode flag
                        (0 << 1) |               // Write flag
                        (1 << 6) |               // Initial OE is high
                        ((addr & 0x0ff) << 7) |  // Row address
                        (0 << 20) |              // Final OE is low (for read)
                        ((addr >> 8) << 22));    // Column address. Note that it starts at A1, not A0.

    while (pio_sm_is_rx_fifo_empty(pio, sm)) {}  // Wait for data to arrive
    d = pio_sm_get(pio, sm);                 // Return the data
    return d;
}

// A7 low (only for row address)
int ram4416_half0_read(int addr)
{
    // CCCCCCRRRRRRR
    pio_sm_put(pio, sm, 0 |                      // Fast page mode flag
                        (0 << 1) |               // Write flag
                        (1 << 6) |               // Initial OE is high
                        ((addr & 0x07f) << 7) |  // Row address
                        (0 << 20) |              // Final OE is low (for read)
                        ((addr >> 7) << 22));    // Column address. Note that it starts at A1, not A0.

    while (pio_sm_is_rx_fifo_empty(pio, sm)) {}  // Wait for data to arrive
    return pio_sm_get(pio, sm);                 // Return the data
}

int ram4416_half1_read(int addr)
{
    // CCCCCCRRRRRRR
    pio_sm_put(pio, sm, 0 |                      // Fast page mode flag
                        (0 << 1) |               // Write flag
                        (1 << 6) |               // Initial OE is high
                        ((addr & 0x07f | 0x80) << 7) | // Row address
                        (0 << 20) |              // Final OE is low (for read)
                        ((addr >> 7) << 22));    // Column address. Note that it starts at A1, not A0.

    while (pio_sm_is_rx_fifo_empty(pio, sm)) {}  // Wait for data to arrive
    return pio_sm_get(pio, sm);                 // Return the data

}


void ram44256_ram_write(int addr, int data)
{
    pio_sm_put(pio, sm, 0 |                     // Fast page mode flag
                        (1 << 1) |              // Write flag
                        (1 << 6) |              // OE is high
                        ((addr & 0x1ff) << 7) | // Row address
                        ((data & 0xf) << 16) |  // Data nibble
                        (1 << 20) |             // Final OE is still high (write mode)
                        ((addr >> 9) << 21));   // Column address

    while (pio_sm_is_rx_fifo_empty(pio, sm)) {} // Wait for dummy data
    pio_sm_get(pio, sm);                        // Discard the dummy data bit
}


void ram4464_ram_write(int addr, int data)
{
    pio_sm_put(pio, sm, 0 |                     // Fast page mode flag
                        (1 << 1) |              // Write flag
                        (1 << 6) |              // OE is high
                        ((addr & 0xff) << 7) | // Row address
                        ((data & 0xf) << 16) |  // Data nibble
                        (1 << 20) |             // Final OE is still high (write mode)
                        ((addr >> 8) << 21));   // Column address

    while (pio_sm_is_rx_fifo_empty(pio, sm)) {} // Wait for dummy data
    pio_sm_get(pio, sm);                        // Discard the dummy data bit
}

void ram4416_ram_write(int addr, int data)
{
    pio_sm_put(pio, sm, 0 |                     // Fast page mode flag
                        (1 << 1) |              // Write flag
                        (1 << 6) |              // OE is high
                        ((addr & 0xff) << 7) | // Row address
                        ((data & 0xf) << 16) |  // Data nibble
                        (1 << 20) |             // Final OE is still high (write mode)
                        ((addr >> 8) << 22));   // Column address. Note it starts at A1 not A0.

    while (pio_sm_is_rx_fifo_empty(pio, sm)) {} // Wait for dummy data
    pio_sm_get(pio, sm);                        // Discard the dummy data bit
}

void ram4416_half0_write(int addr, int data)
{
    pio_sm_put(pio, sm, 0 |                     // Fast page mode flag
                        (1 << 1) |              // Write flag
                        (1 << 6) |              // OE is high
                        ((addr & 0x7f) << 7) | // Row address
                        ((data & 0xf) << 16) |  // Data nibble
                        (1 << 20) |             // Final OE is still high (write mode)
                        ((addr >> 7) << 22));   // Column address. Note it starts at A1 not A0.

    while (pio_sm_is_rx_fifo_empty(pio, sm)) {} // Wait for dummy data
    pio_sm_get(pio, sm);                        // Discard the dummy data bit
}

void ram4416_half1_write(int addr, int data)
{
    pio_sm_put(pio, sm, 0 |                     // Fast page mode flag
                        (1 << 1) |              // Write flag
                        (1 << 6) |              // OE is high
                        ((addr & 0x7f | 0x80) << 7) | // Row address
                        ((data & 0xf) << 16) |  // Data nibble
                        (1 << 20) |             // Final OE is still high (write mode)
                        ((addr >> 7) << 22));   // Column address. Note it starts at A1 not A0.

    while (pio_sm_is_rx_fifo_empty(pio, sm)) {} // Wait for dummy data
    pio_sm_get(pio, sm);                        // Discard the dummy data bit
}

// Routines to set up and tear down the PIO program (and the RAM test)
void ram44256_64_16_setup_pio(uint speed_grade, int ic)
{
    uint pin = 5;
    set_current_pio_program(&ram44256_program);
    // Patches the program with the correct delay values
    if (ic == 2) {
        pio_patch_delays(ram44256_delays[speed_grade], RAM_4BIT_DELAY_FIELDS);
    } else if (ic == 1) {
        pio_patch_delays(ram4464_delays[speed_grade], RAM_4BIT_DELAY_FIELDS);
    } else {
        pio_patch_delays(ram4416_delays[speed_grade], RAM_4BIT_DELAY_FIELDS);
    }
    bool rc = pio_claim_free_sm_and_add_program_for_gpio_range(get_current_pio_program(), &pio, &sm, &offset, pin, 17, true);
    ram44256_program_init(pio, sm, offset, pin);
    pio_sm_set_enabled(pio, sm, true);
}

void ram44256_setup_pio(uint speed_grade, uint variant)
{
    ram44256_64_16_setup_pio(speed_grade, 2);
}

void ram4464_setup_pio(uint speed_grade, uint variant)
{
    ram44256_64_16_setup_pio(speed_grade, 1);
}

void ram4416_setup_pio(uint speed_grade, uint variant)
{
   ram44256_64_16_setup_pio(speed_grade, 0);
}

void ram4416_half_setup_pio(uint speed_grade, uint variant);

void ram44256_teardown_pio()
{
    pio_sm_set_enabled(pio, sm, false);
    pio_remove_program_and_unclaim_sm(&ram44256_program, pio, sm, offset);
}

// This RAM chip configuration
static const mem_chip_t ram44256_chip = { .setup_pio = ram44256_setup_pio,
                                          .teardown_pio = ram44256_teardown_pio,
                                          .ram_read = ram44256_ram_read,
                                          .ram_write = ram44256_ram_write,
                                          .mem_size = 262144,
                                          .bits = 4,
                                          .variants = NULL,
                                          .speed_grades = RAM44256_DELAYS,
                                          .chip_name = "44256 (256Kx4)",
                                          .speed_names = {"60ns", "70ns", "80ns", "100ns", "120ns"} };

static const mem_chip_t ram4464_chip  = { .setup_pio = ram4464_setup_pio,
                                          .teardown_pio = ram44256_teardown_pio,
                                          .ram_read = ram4464_ram_read,
                                          .ram_write = ram4464_ram_write,
                                          .mem_size = 65536,
                                          .bits = 4,
                                          .variants = NULL,
                                          .speed_grades = RAM4464_DELAYS,
                                          .chip_name = "4464 (64Kx4)",
                                          .speed_names = {"60ns", "70ns", "80ns", "100ns", "120ns", "150ns"} };

static const mem_chip_t ram4416_chip  = { .setup_pio = ram4416_setup_pio,
                                          .teardown_pio = ram44256_teardown_pio,
                                          .ram_read = ram4416_ram_read,
                                          .ram_write = ram4416_ram_write,
                                          .mem_size = 16384,
                                          .bits = 4,
                                          .variants = NULL,
                                          .speed_grades = RAM4416_DELAYS,
                                          .chip_name = "4416 (16Kx4)",
                                          .speed_names = {"120ns", "150ns", "200ns"} };

// This RAM chip configuration
static const mem_chip_variants_t ram4416_half_chip_variants = {
                                          .num_variants = 2,
                                          .variant_names = {"TMS4408T (low)", "TMS4408B (high)"} };

static mem_chip_t ram4416_half_chip = { .setup_pio = ram4416_half_setup_pio,
                                          .teardown_pio = ram44256_teardown_pio,
                                          .ram_read = ram4416_ram_read,
                                          .ram_write = ram4416_ram_write,
                                          .mem_size = 8192,
                                          .bits = 4,
                                          .variants = &ram4416_half_chip_variants,
                                          .speed_grades = RAM4416_DELAYS,
                                          .chip_name = "4408 (8Kx4 use 4416skt)",
                                          .speed_names = {"120ns", "150ns", "200ns"} };

// Only used for half-qualified 4408 devices
void ram4416_half_setup_pio(uint speed_grade, uint variant)
{
    ram4416_setup_pio(speed_grade, 0);

    // Use appropriate read and write functions.
    switch (variant) {
        case 0:
            ram4416_half_chip.ram_read = ram4416_half0_read;
            ram4416_half_chip.ram_write = ram4416_half0_write;
            break;
        case 1:
            ram4416_half_chip.ram_read = ram4416_half1_read;
            ram4416_half_chip.ram_write = ram4416_half1_write;
            break;
        default:
            break;
    }
}


%}
